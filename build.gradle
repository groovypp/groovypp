apply plugin: 'maven'

gppVer = '0.4.243'

def improveDependencies(pom) {
    pom.dependencies = pom.dependencies.findAll { dep ->
        !(dep.artifactId in ['groovypp', 'groovypp-all', 'groovypp-nodep', 'groovypp-all-nodep'])
    }
    pom.dependencies.each { dep ->
        println dep
    }
    println()
}

[':G17X' : '1.7.10', ':G18X' : '1.8.0'].each { prj, groovyVer ->

    project("Test${prj.substring(1)}") {
        apply plugin: 'groovy'
        apply plugin: 'idea'

        repositories {
            mavenCentral()
            mavenRepo urls: 'http://groovypp.artifactoryonline.com/groovypp/libs-releases-local/'
            mavenRepo urls: 'http://repository.codehaus.org/'
        }

        dependencies {
            groovy(group: 'org.codehaus.groovy', name: 'groovy', version: groovyVer)

            compile(group: 'org.codehaus.groovy', name: 'groovy', version: groovyVer)

            compile files("../${prj.substring(1)}/build/classes/main")

            compile "junit:junit:4.8.1"

            testRuntime(group: 'org.apache.ant', name: 'ant', version: '1.8.1')
            testRuntime(group: 'commons-cli', name: 'commons-cli', version: '1.1')
            testRuntime(group: 'org.apache.ivy', name: 'ivy', version: '2.2.0')
            testRuntime(group: 'org.mortbay.jetty', name: 'servlet-api', version: '3.0.20100224')
        }

        sourceSets {
            test {
                groovy {
                    srcDirs file("../Tests/tests"), file("../StdLib/tests")
                }

            }
        }

        compileTestGroovy.dependsOn << ["$prj:compileGroovy"]
    }

    project(prj) {

        apply plugin: 'groovy'
        apply plugin: 'idea'
        apply plugin: 'maven'

        group = 'org.mbte.groovypp'
        version = "${gppVer}_$groovyVer"

        repositories {
            mavenCentral()

            mavenRepo urls: new File("${System.getProperty('user.home')}/.m2/repository").toURL().toString()

            mavenRepo urls: 'http://groovypp.artifactoryonline.com/groovypp/libs-releases-local/'
            mavenRepo urls: 'http://repository.codehaus.org/'
        }

        dependencies {
            groovy(group: 'org.codehaus.groovy', name: 'groovy', version: groovyVer)

            compile(group: 'org.codehaus.groovy', name: 'groovy', version: groovyVer)
            compile(group: 'org.mbte.groovypp', name: 'groovypp-nodep', version: "0.4.230_${groovyVer}")
            compile "junit:junit:4.8.1"
        }

        sourceSets {
            compiler {
                groovy {
                    srcDir file("../Compiler/src")
                }
                classesDir = file('build/classes/main')
            }
            stdlib {
                groovy {
                    srcDir file("../StdLib/src")
                }
                classesDir = file('build/classes/main')
            }
        }

        task copyMetaInf << {
          def myFile = file("build/classes/main/META-INF/groovypp-release-info.properties")

          copy {
            from file('../Compiler/src/META-INF')
            into file('build/classes/main/META-INF')
          }

          def src = myFile.text
          src = src.replaceAll("##ImplementationVersion##", gppVer)

          def dateTime = new Date()
          src = src.replaceAll("##BuildDate##", dateTime.format("dd-MMM-yyyy"))
          src = src.replaceAll("##BuildTime##", dateTime.format("hh:mm aa"))

          myFile.text = src
        }

        compileGroovy.dependsOn << [compileCompilerGroovy, compileStdlibGroovy, copyMetaInf]

        task sourcesJar(type: Jar) {
             baseName = 'groovypp'
             classifier = 'sources'
             from sourceSets.compiler.allSource + sourceSets.stdlib.allSource
        }

        task allSourcesJar(type: Jar) {
             baseName = 'groovypp'
             classifier = 'sources'
             appendix = 'all'
             from sourceSets.compiler.allSource + sourceSets.stdlib.allSource
        }

        task nodepSourcesJar(type: Jar) {
             baseName = 'groovypp'
             classifier = 'sources'
             appendix = 'nodep'
             from sourceSets.compiler.allSource + sourceSets.stdlib.allSource
        }

        task allNodepSourcesJar(type: Jar) {
             baseName = 'groovypp'
             classifier = 'sources'
             appendix = 'all-nodep'
             from sourceSets.compiler.allSource + sourceSets.stdlib.allSource
        }

        jar {
            from = file('build/classes/main')
            dependsOn << compileGroovy
            baseName = 'groovypp'
        }

        task allJar(type:Jar, dependsOn:[jar]) {
            appendix = 'all'
            baseName = 'groovypp'

            doLast {
              ant.taskdef(name:'jarjar', classname: 'com.tonicsystems.jarjar.JarJarTask', classpath: '../lib/jarjar-1.0.jar')

              ant.jarjar(jarfile: "build/libs/groovypp-all-${version}.jar") {
                  zipfileset(dir: 'build/classes/main')
                  rule(pattern:"org.objectweb.**", result:"groovyjarjarasm.@1")
              }
            }
        }

        task nodepAllJar(type:Jar, dependsOn:[jar]) {
            appendix = 'all-nodep'
            baseName = 'groovypp'

            doLast {
              ant.taskdef(name:'jarjar', classname: 'com.tonicsystems.jarjar.JarJarTask', classpath: '../lib/jarjar-1.0.jar')

              ant.jarjar(jarfile: "build/libs/groovypp-all-nodep-${version}.jar") {
                  zipfileset(dir: 'build/classes/main')
                  rule(pattern:"org.objectweb.**", result:"groovyjarjarasm.@1")
              }
            }
        }

        task nodepJar(type:Jar, dependsOn:jar) {
          appendix = 'nodep'
          baseName = 'groovypp'

          doLast {
            ant.jar(jarfile: "build/libs/groovypp-nodep-${version}.jar") {
                zipfileset(dir: 'build/classes/main')
            }
          }
        }

        artifacts {
            archives sourcesJar
            archives nodepSourcesJar
            archives allNodepSourcesJar
            archives allSourcesJar
            archives jar
            archives allJar
            archives nodepJar
            archives nodepAllJar
        }

        uploadArchives.doFirst {
          println 'copying archives'
          ant.copy(file: "build/libs/groovypp-${version}.jar", tofile:"build/libs/groovypp-nodep-${version}.jar")
        }

        if (project.hasProperty('ARTIFACTORY_USER') && project.hasProperty('ARTIFACTORY_PASSWORD')) {
            uploadArchives {
                repositories.mavenDeployer {
                    def repo = "http://groovypp.artifactoryonline.com/groovypp/libs-releases-local/"
                    if(System.getProperty("repo") == 'local')
                      repo = "file://" + new File(System.getProperty('user.home'),  ".m2" + File.separatorChar + "repository").absolutePath
    
                    repository(url: repo) {
                        authentication(userName: ARTIFACTORY_USER, password: ARTIFACTORY_PASSWORD)
                    }
    
                    addFilter('groovypp') {artifact, file ->
                        !artifact.toString().contains('-all') && !artifact.toString().contains('-nodep')
                    }.whenConfigured { pom ->
                        improveDependencies pom
                    }
                    addFilter('groovypp-nodep') {artifact, file ->
                        !artifact.toString().contains('-all')  && artifact.toString().contains('-nodep')
                    }.whenConfigured { pom ->
                      pom.dependencies = []
                    }
                    addFilter('groovypp-all-nodep') {artifact, file ->
                        artifact.toString().contains('-all')  && artifact.toString().contains('-nodep')
                    }.whenConfigured { pom ->
                      pom.dependencies = []
                    }
                    addFilter('groovypp-all') {artifact, file ->
                        artifact.toString().contains('-all') && !artifact.toString().contains('-nodep')
                    }.whenConfigured { pom ->
                        pom.dependencies.each { dep ->
                            if(dep.artifactId == 'groovy') {
                              dep.artifactId = 'groovy-all'
                            }
                        }
                        improveDependencies pom
                    }
                }
            }
        } 
        else {
            println "Note: '$prj:uploadArchives' unavailable as properties ARTIFACTORY_USER/ARTIFACTORY_PASSWORD are not defined"
        }

        task installZip(dependsOn:['jar', 'allJar']) << {
          ant.zip(destfile:"build/groovypp-${version}.zip",comment:"The Groovy++ binary distribution.") {
            zipfileset dir:"./install", prefix=""

            zipfileset file:"build/libs/groovypp-${version}.jar", prefix:"lib"
            zipfileset file:"build/libs/groovypp-all-${version}.jar", prefix:"embeddable"
          }
        }

        task deployGoogle(dependsOn:[sourcesJar, installZip]) << {
          ant.taskdef(name:"gcupload", classname:"net.bluecow.googlecode.ant.GoogleCodeUploadTask", classpath:"../lib/ant-googlecode-0.0.2.jar")

          ant.gcupload(username:GOOGLE_USER, password:GOOGLE_PASSWORD, projectname:"groovypptest", filename:file("build/groovypp-${version}.zip").absolutePath, targetfilename:"groovypp-${version}.zip", summary:"Groovy $groovyVer installation including Groovy++ ${version}", labels:"Featured", verbose:"true")

          ant.gcupload(username:GOOGLE_USER, password:GOOGLE_PASSWORD, projectname:"groovypptest", filename:file("build/libs/groovypp-${version}.jar").absolutePath, targetfilename:"groovypp-${version}.jar", summary:"Groovy++ Jar ${version} (use with groovy-${groovyVer}+.jar)", labels:"Featured", verbose:"true")

          ant.gcupload(username:GOOGLE_USER, password:GOOGLE_PASSWORD, projectname:"groovypptest", filename:file("build/libs/groovypp-all-${version}.jar").absolutePath, targetfilename:"groovypp-all-${version}.jar", summary:"Groovy++ Embeddable Jar ${version} (use with groovy-all-${groovyVer}.jar)", labels:"Featured", verbose:"true")

          ant.gcupload(username:GOOGLE_USER, password:GOOGLE_PASSWORD, projectname:"groovypptest", filename:file("build/libs/groovypp-${version}-sources.jar").absolutePath, targetfilename:"groovypp-${version}-sources.jar", summary:"Groovy++ Sources Jar", labels:"Featured", verbose:"true")
        }
    }
}

task test(dependsOn: [':TestG17X:test', ':TestG18X:test'])

task uploadArchives(dependsOn: [':G17X:uploadArchives', ':G18X:uploadArchives'])

task compile(dependsOn: ':Compiler:compileGroovy')

task deployGoogle(dependsOn: ':G17X:deployGoogle')